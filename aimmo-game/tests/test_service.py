from unittest import TestCase
import service

from simulation.avatar.avatar_manager import AvatarManager
from .test_simulation.maps import MockPickup
from .test_simulation.test_world_map import MockCell
from .test_simulation.dummy_avatar import MoveEastDummy
from simulation.location import Location
from simulation.turn_manager import state_provider
from simulation.game_state import GameState
from simulation.world_map import WorldMap


class TestService(TestCase):

    class DummyAvatarManager(AvatarManager):
        avatars = [MoveEastDummy(1, Location(0, -1))]

    def setUp(self):
        """
        Sets up the JSON of the world state generated by the service file for testing.
        """
        self.avatar_manager = self.DummyAvatarManager()

        CELLS = [
            [
                {'pickup': MockPickup('b'), 'avatar': self.avatar_manager.avatars[0]},
                {},
                {'generates_score': True},
            ],
            [
                {},
                {'habitable': False},
                {'pickup': MockPickup('a')},
            ],
        ]

        grid = {Location(x, y-1): MockCell(Location(x, y-1), **CELLS[x][y])
                for y in range(3) for x in range(2)}

        state_provider.set_world(GameState(WorldMap(grid, {}), self.avatar_manager))

        self.world_state_json = service.get_world_state()

    def test_healthy_flask(self):
        """
        Tests the flask service
        """
        service.app.config['TESTING'] = True
        self.app = service.app.test_client()
        response = self.app.get('/')
        self.assertEqual(response.data, 'HEALTHY')

    def test_player_dictionary(self):
        """
        Ensures the "players" element of the get_world_state() JSON returns the correct information for the dummy
        avatar provided into the world.

        NOTE: Orientation (and others) may be hard coded. This test WILL and SHOULD fail if the functionality is added.
        """
        player_dict = self.world_state_json['players']
        self.assertEqual(1, player_dict[0]['id'])
        self.assertEqual(len(player_dict), 1)
        details = player_dict[0]
        self.assertEqual(details['id'], 1)
        self.assertEqual(details['location']['x'], 0)
        self.assertEqual(details['location']['y'], -1)
        self.assertEqual(details['health'], 5)
        self.assertEqual(details['orientation'], "north")
        self.assertEqual(details['score'], 0)
